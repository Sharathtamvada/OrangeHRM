<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="5" time="76.619" timestamp="2024-11-26T11:37:50.475956-05:00" hostname="Sharath"><testcase classname="testCases.test_Dashboard.TestDashboardPage" name="test_Dashboard_Page" time="19.521"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;/html/body/app-root/div/div/div/div/app-home/div/div/div/div/ngx-slick-carousel/div/div/div[3]/div/div/h2&quot;}&#10;  (Session info: chrome=131.0.6778.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF6F49B6CB5+28821]&#10;&#09;(No symbol) [0x00007FF6F4923840]&#10;&#09;(No symbol) [0x00007FF6F47C578A]&#10;&#09;(No symbol) [0x00007FF6F48191BE]&#10;&#09;(No symbol) [0x00007FF6F48194AC]&#10;&#09;(No symbol) [0x00007FF6F4862647]&#10;&#09;(No symbol) [0x00007FF6F483F33F]&#10;&#09;(No symbol) [0x00007FF6F485F412]&#10;&#09;(No symbol) [0x00007FF6F483F0A3]&#10;&#09;(No symbol) [0x00007FF6F480A778]&#10;&#09;(No symbol) [0x00007FF6F480B8E1]&#10;&#09;GetHandleVerifier [0x00007FF6F4CEFCAD+3408013]&#10;&#09;GetHandleVerifier [0x00007FF6F4D0741F+3504127]&#10;&#09;GetHandleVerifier [0x00007FF6F4CFB5FD+3455453]&#10;&#09;GetHandleVerifier [0x00007FF6F4A7BDBB+835995]&#10;&#09;(No symbol) [0x00007FF6F492EB5F]&#10;&#09;(No symbol) [0x00007FF6F492A814]&#10;&#09;(No symbol) [0x00007FF6F492A9AD]&#10;&#09;(No symbol) [0x00007FF6F491A199]&#10;&#09;(No symbol) [0x00007FFF1F93259D]&#10;&#09;RtlUserThreadStart [0x00007FFF20F8AF38+40]">self = &lt;zoovee_payroll_automation_tests.testCases.test_Dashboard.TestDashboardPage object at 0x0000029743167CB0&gt;

    def test_Dashboard_Page(self):
        baseURL = ReadConfig.getApplicationURL()
        user = ReadConfig.getUseremail()
        password = ReadConfig.getPassword()
    
        # Initialize the Chrome driver
        self.driver = webdriver.Chrome()
        self.driver.get(baseURL)
        self.driver.maximize_window()
    
        # Initialize the HomePage object
        self.driver.implicitly_wait(10)
        self.lp = LoginPage(self.driver)
        self.lp.setUserName(user)
        self.lp.setPassword(password)
        self.lp.clickLogin()
        self.driver.save_screenshot(os.path.abspath(os.curdir) + "\\screenshots\\" + "home_page.png")
        self.dp = DashboardPage(self.driver)
        self.dp.selectTimesheets()
        self.driver.save_screenshot(os.path.abspath(os.curdir) + "\\screenshots\\" + "timesheets_page.png")
&gt;       self.dp.selectEmployees()

testCases\test_Dashboard.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pageObjects\DashboardPageObjects.py:19: in selectEmployees
    self.driver.find_element(By.XPATH,self.sdbr_employees_xpath).click()
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:770: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:384: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029743094DD0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...bol) [0x00007FF6F491A199]\\n\\t(No symbol) [0x00007FFF1F93259D]\\n\\tRtlUserThreadStart [0x00007FFF20F8AF38+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"/html/body/app-root/div/div/div/div/app-home/div/div/div/div/ngx-slick-carousel/div/div/div[3]/div/div/h2"}
E         (Session info: chrome=131.0.6778.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF6F49B6CB5+28821]
E       	(No symbol) [0x00007FF6F4923840]
E       	(No symbol) [0x00007FF6F47C578A]
E       	(No symbol) [0x00007FF6F48191BE]
E       	(No symbol) [0x00007FF6F48194AC]
E       	(No symbol) [0x00007FF6F4862647]
E       	(No symbol) [0x00007FF6F483F33F]
E       	(No symbol) [0x00007FF6F485F412]
E       	(No symbol) [0x00007FF6F483F0A3]
E       	(No symbol) [0x00007FF6F480A778]
E       	(No symbol) [0x00007FF6F480B8E1]
E       	GetHandleVerifier [0x00007FF6F4CEFCAD+3408013]
E       	GetHandleVerifier [0x00007FF6F4D0741F+3504127]
E       	GetHandleVerifier [0x00007FF6F4CFB5FD+3455453]
E       	GetHandleVerifier [0x00007FF6F4A7BDBB+835995]
E       	(No symbol) [0x00007FF6F492EB5F]
E       	(No symbol) [0x00007FF6F492A814]
E       	(No symbol) [0x00007FF6F492A9AD]
E       	(No symbol) [0x00007FF6F491A199]
E       	(No symbol) [0x00007FFF1F93259D]
E       	RtlUserThreadStart [0x00007FFF20F8AF38+40]

.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: NoSuchElementException</failure></testcase><testcase classname="testCases.test_Home.TestHomePage" name="test_Home_Page" time="19.972"><failure message="selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable&#10;  (Session info: chrome=131.0.6778.86)&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF6F49B6CB5+28821]&#10;&#09;(No symbol) [0x00007FF6F4923840]&#10;&#09;(No symbol) [0x00007FF6F47C55B9]&#10;&#09;(No symbol) [0x00007FF6F481A674]&#10;&#09;(No symbol) [0x00007FF6F480CBA0]&#10;&#09;(No symbol) [0x00007FF6F483F2FA]&#10;&#09;(No symbol) [0x00007FF6F480C3F6]&#10;&#09;(No symbol) [0x00007FF6F483F510]&#10;&#09;(No symbol) [0x00007FF6F485F412]&#10;&#09;(No symbol) [0x00007FF6F483F0A3]&#10;&#09;(No symbol) [0x00007FF6F480A778]&#10;&#09;(No symbol) [0x00007FF6F480B8E1]&#10;&#09;GetHandleVerifier [0x00007FF6F4CEFCAD+3408013]&#10;&#09;GetHandleVerifier [0x00007FF6F4D0741F+3504127]&#10;&#09;GetHandleVerifier [0x00007FF6F4CFB5FD+3455453]&#10;&#09;GetHandleVerifier [0x00007FF6F4A7BDBB+835995]&#10;&#09;(No symbol) [0x00007FF6F492EB5F]&#10;&#09;(No symbol) [0x00007FF6F492A814]&#10;&#09;(No symbol) [0x00007FF6F492A9AD]&#10;&#09;(No symbol) [0x00007FF6F491A199]&#10;&#09;(No symbol) [0x00007FFF1F93259D]&#10;&#09;RtlUserThreadStart [0x00007FFF20F8AF38+40]">self = &lt;zoovee_payroll_automation_tests.testCases.test_Home.TestHomePage object at 0x00000297435C29F0&gt;

    def test_Home_Page(self):
        baseURL = ReadConfig.getApplicationURL()
        user = ReadConfig.getUseremail()
        password = ReadConfig.getPassword()
    
        # Initialize the Chrome driver
        self.driver = webdriver.Chrome()
        self.driver.get(baseURL)
        self.driver.maximize_window()
    
        # Initialize the HomePage object
        self.driver.implicitly_wait(10)
        self.lp = LoginPage(self.driver)
        self.lp.setUserName(user)
        self.lp.setPassword(password)
        self.lp.clickLogin()
        self.driver.save_screenshot(os.path.abspath(os.curdir) + "\\screenshots\\" + "home_page.png")
        self.hp = HomePage(self.driver)
        self.hp.clickTimesheets()
        self.driver.back()
        self.hp.clickSliderRight()
        self.hp.clickEmployees()
        self.driver.back()
        self.hp.clickSliderLeft()
&gt;       self.hp.clickPrograms()

testCases\test_Home.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pageObjects\HomePageObjects.py:24: in clickPrograms
    self.driver.find_element(By.XPATH,self.btn_programs_xpath).click()
.venv\Lib\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
.venv\Lib\site-packages\selenium\webdriver\remote\webelement.py:402: in _execute
    return self._parent.execute(command, params)
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:384: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002974361E150&gt;
response = {'status': 400, 'value': '{"value":{"error":"element not interactable","message":"element not interactable\\n  (Sessio...bol) [0x00007FF6F491A199]\\n\\t(No symbol) [0x00007FFF1F93259D]\\n\\tRtlUserThreadStart [0x00007FFF20F8AF38+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
E         (Session info: chrome=131.0.6778.86)
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF6F49B6CB5+28821]
E       	(No symbol) [0x00007FF6F4923840]
E       	(No symbol) [0x00007FF6F47C55B9]
E       	(No symbol) [0x00007FF6F481A674]
E       	(No symbol) [0x00007FF6F480CBA0]
E       	(No symbol) [0x00007FF6F483F2FA]
E       	(No symbol) [0x00007FF6F480C3F6]
E       	(No symbol) [0x00007FF6F483F510]
E       	(No symbol) [0x00007FF6F485F412]
E       	(No symbol) [0x00007FF6F483F0A3]
E       	(No symbol) [0x00007FF6F480A778]
E       	(No symbol) [0x00007FF6F480B8E1]
E       	GetHandleVerifier [0x00007FF6F4CEFCAD+3408013]
E       	GetHandleVerifier [0x00007FF6F4D0741F+3504127]
E       	GetHandleVerifier [0x00007FF6F4CFB5FD+3455453]
E       	GetHandleVerifier [0x00007FF6F4A7BDBB+835995]
E       	(No symbol) [0x00007FF6F492EB5F]
E       	(No symbol) [0x00007FF6F492A814]
E       	(No symbol) [0x00007FF6F492A9AD]
E       	(No symbol) [0x00007FF6F491A199]
E       	(No symbol) [0x00007FFF1F93259D]
E       	RtlUserThreadStart [0x00007FFF20F8AF38+40]

.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementNotInteractableException</failure></testcase><testcase classname="testCases.test_Login.TestLogin" name="test_login" time="5.773" /><testcase classname="testCases.test_Logout.TestLogout" name="test_logout" time="19.791"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;/html/body/div[3]/div[2]/div/div/div/button/span&quot;}&#10;  (Session info: chrome=131.0.6778.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF6F49B6CB5+28821]&#10;&#09;(No symbol) [0x00007FF6F4923840]&#10;&#09;(No symbol) [0x00007FF6F47C578A]&#10;&#09;(No symbol) [0x00007FF6F48191BE]&#10;&#09;(No symbol) [0x00007FF6F48194AC]&#10;&#09;(No symbol) [0x00007FF6F4862647]&#10;&#09;(No symbol) [0x00007FF6F483F33F]&#10;&#09;(No symbol) [0x00007FF6F485F412]&#10;&#09;(No symbol) [0x00007FF6F483F0A3]&#10;&#09;(No symbol) [0x00007FF6F480A778]&#10;&#09;(No symbol) [0x00007FF6F480B8E1]&#10;&#09;GetHandleVerifier [0x00007FF6F4CEFCAD+3408013]&#10;&#09;GetHandleVerifier [0x00007FF6F4D0741F+3504127]&#10;&#09;GetHandleVerifier [0x00007FF6F4CFB5FD+3455453]&#10;&#09;GetHandleVerifier [0x00007FF6F4A7BDBB+835995]&#10;&#09;(No symbol) [0x00007FF6F492EB5F]&#10;&#09;(No symbol) [0x00007FF6F492A814]&#10;&#09;(No symbol) [0x00007FF6F492A9AD]&#10;&#09;(No symbol) [0x00007FF6F491A199]&#10;&#09;(No symbol) [0x00007FFF1F93259D]&#10;&#09;RtlUserThreadStart [0x00007FFF20F8AF38+40]">self = &lt;zoovee_payroll_automation_tests.testCases.test_Logout.TestLogout object at 0x00000297435C3230&gt;

    @pytest.mark.sanity
    def test_logout(self):
        baseURL = ReadConfig.getApplicationURL()
        user = ReadConfig.getUseremail()
        password = ReadConfig.getPassword()
    
        # Initialize the Chrome driver
        self.driver = webdriver.Chrome()
        self.driver.get(baseURL)
        self.driver.maximize_window()
    
        # Initialize the LoginPage object
        self.driver.implicitly_wait(10)
        self.lp = LoginPage(self.driver)
        self.lp.setUserName(user)
        self.lp.setPassword(password)
        self.lp.clickLogin()
        self.lop = LogoutPage(self.driver)
        self.lop.clickAccount()
        self.driver.save_screenshot(os.path.abspath(os.curdir) + "\\screenshots\\" + "logout_page.png")
&gt;       self.lop.clickLogout()

testCases\test_Logout.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pageObjects\LogoutPageObjects.py:18: in clickLogout
    self.driver.find_element(By.XPATH,self.btn_logout_xpath).click()
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:770: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:384: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000297436EB830&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...bol) [0x00007FF6F491A199]\\n\\t(No symbol) [0x00007FFF1F93259D]\\n\\tRtlUserThreadStart [0x00007FFF20F8AF38+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"/html/body/div[3]/div[2]/div/div/div/button/span"}
E         (Session info: chrome=131.0.6778.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF6F49B6CB5+28821]
E       	(No symbol) [0x00007FF6F4923840]
E       	(No symbol) [0x00007FF6F47C578A]
E       	(No symbol) [0x00007FF6F48191BE]
E       	(No symbol) [0x00007FF6F48194AC]
E       	(No symbol) [0x00007FF6F4862647]
E       	(No symbol) [0x00007FF6F483F33F]
E       	(No symbol) [0x00007FF6F485F412]
E       	(No symbol) [0x00007FF6F483F0A3]
E       	(No symbol) [0x00007FF6F480A778]
E       	(No symbol) [0x00007FF6F480B8E1]
E       	GetHandleVerifier [0x00007FF6F4CEFCAD+3408013]
E       	GetHandleVerifier [0x00007FF6F4D0741F+3504127]
E       	GetHandleVerifier [0x00007FF6F4CFB5FD+3455453]
E       	GetHandleVerifier [0x00007FF6F4A7BDBB+835995]
E       	(No symbol) [0x00007FF6F492EB5F]
E       	(No symbol) [0x00007FF6F492A814]
E       	(No symbol) [0x00007FF6F492A9AD]
E       	(No symbol) [0x00007FF6F491A199]
E       	(No symbol) [0x00007FFF1F93259D]
E       	RtlUserThreadStart [0x00007FFF20F8AF38+40]

.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: NoSuchElementException</failure></testcase><testcase classname="testCases.test_Upload.TestUpload" name="test_upload_file" time="10.150" /></testsuite></testsuites>